{"ast":null,"code":"var _jsxFileName = \"G:\\\\ReactEvents_old\\\\client\\\\src\\\\pages\\\\auth\\\\ResetPassword.js\",\n    _s = $RefreshSig$();\n\nimport Avatar from \"@mui/material/Avatar\";\nimport Button from \"@mui/material/Button\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport TextField from \"@mui/material/TextField\";\nimport Grid from \"@mui/material/Grid\";\nimport Box from \"@mui/material/Box\";\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\nimport Typography from \"@mui/material/Typography\";\nimport Container from \"@mui/material/Container\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport { connect } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport { HeaderBar } from \"../layout/HeaderBar\";\nimport { ResetPassword as resetPassword } from \"../../utils/auth\";\nimport { useHistory } from \"react-router-dom\";\nimport LoadingIndicator from \"../../components/LoadingIndicator\";\nimport { toast } from 'react-toastify';\nimport { JWT_SECRET } from \"../../env\";\nimport jwtDecode from \"jwt-decode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst theme = createTheme();\n\nfunction ResetPassword(props) {\n  _s();\n\n  const {\n    loggedIn,\n    dispatch\n  } = props;\n  const history = useHistory();\n  const [state, setState] = useState({\n    newpassword: \"\",\n    confirmpassword: \"\",\n    email: \"\",\n    token: \"\"\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const {\n    newpassword,\n    confirmpassword\n  } = state;\n\n  const handleSubmit = function (event) {\n    event.preventDefault();\n\n    if (!state.newpassword || !state.confirmpassword) {\n      toast(\"Please input password!\", {\n        type: \"warning\"\n      });\n      return;\n    }\n\n    if (state.newpassword != state.confirmpassword) {\n      toast(\"Password mismatch!\", {\n        type: \"warning\"\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    dispatch(resetPassword({ ...state\n    }, (err, message) => {\n      setIsLoading(false);\n\n      if (!err) {\n        toast(\"Successfully password reset\", {\n          type: \"success\"\n        });\n        history.push(\"/dashboard\");\n        return;\n      } else {\n        toast(message, {\n          type: \"error\"\n        });\n        return;\n      }\n    }));\n  };\n\n  const handleChange = function (event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setState({ ...state,\n      [name]: value\n    });\n  };\n\n  useEffect(() => {\n    var token = window.location.search.slice(7);\n    let userData = jwtDecode(token, JWT_SECRET);\n    setState({ ...state,\n      email: userData.email,\n      token: token\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: theme,\n    children: [isLoading && /*#__PURE__*/_jsxDEV(LoadingIndicator, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        flexGrow: 1,\n        overflowX: \"hidden\"\n      },\n      margin: \"2% 5%\",\n      children: [/*#__PURE__*/_jsxDEV(HeaderBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        component: \"main\",\n        maxWidth: \"xs\",\n        children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            marginTop: 8,\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(Avatar, {\n            sx: {\n              m: 1,\n              bgcolor: \"secondary.main\"\n            },\n            children: /*#__PURE__*/_jsxDEV(LockOutlinedIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            component: \"h1\",\n            variant: \"h5\",\n            children: \"Reset Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            component: \"form\",\n            noValidate: true,\n            onSubmit: handleSubmit,\n            sx: {\n              mt: 3\n            },\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              spacing: 2,\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  required: true,\n                  fullWidth: true,\n                  name: \"email\",\n                  label: \"Your Email\",\n                  type: \"email\",\n                  id: \"email\",\n                  value: state.email,\n                  disabled: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 110,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  required: true,\n                  fullWidth: true,\n                  name: \"newpassword\",\n                  label: \"New Password\",\n                  type: \"password\",\n                  id: \"newpassword\",\n                  value: state.newpassword,\n                  onChange: handleChange,\n                  autoComplete: \"new password\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 121,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  required: true,\n                  fullWidth: true,\n                  name: \"confirmpassword\",\n                  label: \"ConfirmPassword\",\n                  type: \"password\",\n                  id: \"confirmpassword\",\n                  value: state.confirmpassword,\n                  onChange: handleChange,\n                  autoComplete: \"confirmpassword\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 134,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              fullWidth: true,\n              variant: \"contained\",\n              sx: {\n                mt: 3,\n                mb: 2\n              },\n              children: \"Reset Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ResetPassword, \"0C4s/Tt5EOjICefqwa3AZE9KeYs=\", false, function () {\n  return [useHistory];\n});\n\n_c = ResetPassword;\n\nfunction mapStateToProps(state) {\n  const {\n    loggedIn\n  } = state;\n  return {\n    loggedIn: loggedIn\n  };\n}\n\nconst ConnectedResetPassword = connect(mapStateToProps)(ResetPassword);\nexport { ConnectedResetPassword as ResetPassword };\n\nvar _c;\n\n$RefreshReg$(_c, \"ResetPassword\");","map":{"version":3,"sources":["G:/ReactEvents_old/client/src/pages/auth/ResetPassword.js"],"names":["Avatar","Button","CssBaseline","TextField","Grid","Box","LockOutlinedIcon","Typography","Container","createTheme","ThemeProvider","connect","useEffect","useState","HeaderBar","ResetPassword","resetPassword","useHistory","LoadingIndicator","toast","JWT_SECRET","jwtDecode","theme","props","loggedIn","dispatch","history","state","setState","newpassword","confirmpassword","email","token","isLoading","setIsLoading","handleSubmit","event","preventDefault","type","err","message","push","handleChange","name","value","target","window","location","search","slice","userData","flexGrow","overflowX","marginTop","display","flexDirection","alignItems","m","bgcolor","mt","mb","mapStateToProps","ConnectedResetPassword"],"mappings":"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","sourcesContent":["import Avatar from \"@mui/material/Avatar\";\r\nimport Button from \"@mui/material/Button\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Box from \"@mui/material/Box\";\r\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Container from \"@mui/material/Container\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport { connect } from \"react-redux\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { HeaderBar } from \"../layout/HeaderBar\";\r\nimport { ResetPassword as resetPassword } from \"../../utils/auth\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport LoadingIndicator from \"../../components/LoadingIndicator\";\r\n\r\nimport { toast } from 'react-toastify';\r\nimport {JWT_SECRET} from \"../../env\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nconst theme = createTheme();\r\nfunction ResetPassword(props) {\r\n    const { loggedIn, dispatch } = props;\r\n    const history = useHistory();\r\n    const [state, setState] = useState({\r\n        newpassword:\"\",\r\n        confirmpassword:\"\",\r\n        email:\"\",\r\n        token:\"\"\r\n    });\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const {newpassword, confirmpassword } = state;\r\n\r\n    const handleSubmit = function (event) {\r\n        event.preventDefault();\r\n\r\n        if (!state.newpassword || !state.confirmpassword) {\r\n            toast(\"Please input password!\", {\r\n                type: \"warning\"\r\n            });\r\n            return;\r\n        }\r\n        if (state.newpassword != state.confirmpassword) {\r\n            toast(\"Password mismatch!\", {\r\n                type: \"warning\"\r\n            });\r\n            return;\r\n        }\r\n        setIsLoading(true);\r\n        dispatch(resetPassword({...state}, (err, message) => {\r\n            setIsLoading(false);\r\n            if (!err) {\r\n                toast(\"Successfully password reset\", {\r\n                    type: \"success\"\r\n                });\r\n                history.push(\"/dashboard\");\r\n                return;\r\n            } else {\r\n                toast(message, {\r\n                    type: \"error\"\r\n                });\r\n                return;\r\n            }\r\n        }));\r\n    }\r\n\r\n\r\n\r\n    const handleChange = function (event) {\r\n        const { name, value } = event.target;\r\n        setState({ ...state, [name]: value });\r\n    };\r\n  \r\n    useEffect(() => {\r\n        var token = window.location.search.slice(7);\r\n        let userData = jwtDecode(token,JWT_SECRET);\r\n        setState({...state,email:userData.email,token:token});\r\n    }, []);\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            {isLoading && <LoadingIndicator />}\r\n            <Box sx={{ flexGrow: 1, overflowX: \"hidden\" }} margin=\"2% 5%\">\r\n                <HeaderBar />\r\n                <Container component=\"main\" maxWidth=\"xs\">\r\n                    <CssBaseline />\r\n                    <Box\r\n                        sx={{\r\n                            marginTop: 8,\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\",\r\n                            alignItems: \"center\"\r\n                        }}\r\n                    >\r\n                        <Avatar sx={{ m: 1, bgcolor: \"secondary.main\" }}>\r\n                            <LockOutlinedIcon />\r\n                        </Avatar>\r\n                        <Typography component=\"h1\" variant=\"h5\">\r\n                            Reset Password\r\n                        </Typography>\r\n                        <Box\r\n                            component=\"form\"\r\n                            noValidate\r\n                            onSubmit={handleSubmit}\r\n                            sx={{ mt: 3 }}\r\n                        >\r\n                            <Grid container spacing={2}>\r\n                                <Grid item xs={12}>\r\n                                    <TextField\r\n                                        required\r\n                                        fullWidth\r\n                                        name=\"email\"\r\n                                        label=\"Your Email\"\r\n                                        type=\"email\"\r\n                                        id=\"email\"\r\n                                        value={state.email}\r\n                                        disabled />\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <TextField\r\n                                        required\r\n                                        fullWidth\r\n                                        name=\"newpassword\"\r\n                                        label=\"New Password\"\r\n                                        type=\"password\"\r\n                                        id=\"newpassword\"\r\n                                        value={state.newpassword}\r\n                                        onChange={handleChange}\r\n                                        autoComplete=\"new password\"\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <TextField\r\n                                        required\r\n                                        fullWidth\r\n                                        name=\"confirmpassword\"\r\n                                        label=\"ConfirmPassword\"\r\n                                        type=\"password\"\r\n                                        id=\"confirmpassword\"\r\n                                        value={state.confirmpassword}\r\n                                        onChange={handleChange}\r\n                                        autoComplete=\"confirmpassword\"\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Button\r\n                                type=\"submit\"\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                sx={{ mt: 3, mb: 2 }}\r\n                            >\r\n                                Reset Password\r\n                            </Button>\r\n                        </Box>\r\n                    </Box>\r\n                </Container>\r\n            </Box>\r\n        </ThemeProvider>\r\n    );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    const { loggedIn } = state;\r\n    return { loggedIn: loggedIn };\r\n}\r\n\r\nconst ConnectedResetPassword = connect(mapStateToProps)(ResetPassword);\r\n\r\n\r\nexport { ConnectedResetPassword as ResetPassword };\r\n"]},"metadata":{},"sourceType":"module"}